package org.kafecho.scalajozi.koans


import org.junit.runner.RunWith
import org.kafecho.scalajozi.koans.support.KoanSuite
import org.scalatest.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class Koan09Classes extends KoanSuite{
  koan("A mutable class"){
    class Mutable(var value : Int)
    val m = new Mutable(5)
    
    m.value should equal ( __ )

    m.value = 6
    
    m.value should equal ( __ )
  }
  
  koan("An immutable class"){
    class Immutable(val value : Int)
    
    val im = new Immutable(10)
    im.value should equal (__)
    
    // Code below won't compile
    //im.value = 5
  }
  
  koan("In Scala, the constructor is the body of the class"){
    class AClass{
      println ("This code is invoked when the class is instantiated")
    }

    new AClass
  }
  
    koan("In Scala, a class can take constructor parameters"){
    class Hello( whom: String){
      println (s"Hello $whom")
    }

    new Hello("world")
    
    // whom is not a field of the class so this won't compile.
    //hello.whom
  }
    
    koan ("Class super class constructors") {
    class Animal(val name: String, val numberOfLegs: Int)

    class Cat(name: String) extends Animal(name, 4)

    val cat = new Cat("Lou")
    cat.name should be (__)
    cat.numberOfLegs should be (__)
    
    // For fun, define a wildebeest named Gnu
  }
    
  koan("Case classes are special classes with methods auto-generated by the compiler."){
    case class Person(firstname: String, surname: String)
    val guillaume = Person("Guillaume", "Belrose")
    guillaume.firstname should equal (__)
    guillaume.surname   should equal (__)

    val anotherGuillaume = Person("Guillaume","Belrose")
    
    // The compiler auto-generates the equality code.
    (anotherGuillaume == guillaume) should be (__)
    
    // You can create copies of a case class.
    val adwin = guillaume.copy(firstname="Adwin")
    
    adwin.surname should be ("Belrose")
 }  
}

